use serde::Deserialize;

use crate::sites::Sites;

#[derive(Clone, Debug, Default, Deserialize)]
pub enum Currency {
    XRP,
    DECOY,
    USDT,
    #[default]
    BTC,
    LTC,
    TRX,
    DOGE,
    ETH,
    XLM,
    BCH,
    BNB,
    SHIB,
    USDC,
    ADA,
    DASH,
    SOL,
    ATOM,
    ETC,
    XMR,
    EOS,
    BTTC,
    POL,
    DOT,
    ZEC,
    RVN,
    LINK,
    DAI,
    TUSD,
    AVAX,
    NEAR,
    ZEN,
    AAVE,
    NOT,
    ENA,
    UNI,
    TON,
    TRUMP,
    FDUSD,
    WBTC,
    CAD,
}

impl Currency {
    pub fn get_min_bet(&self, site: Sites) -> f32 {
        match site {
            Sites::DuckDiceIo => match self {
                Self::XRP => 0.001,
                Self::DECOY => 0.01,
                Self::USDT => 0.002,
                Self::BTC => 0.00000001,
                Self::LTC => 0.00002,
                Self::TRX => 0.006,
                Self::DOGE => 0.01,
                Self::ETH => 0.0000005,
                Self::XLM => 0.005,
                Self::BCH => 0.000005,
                Self::BNB => 0.000002,
                Self::SHIB => 100.,
                Self::USDC => 0.002,
                Self::ADA => 0.002,
                Self::DASH => 0.0001,
                Self::SOL => 0.000008,
                Self::ATOM => 0.0004,
                Self::ETC => 0.00012,
                Self::XMR => 0.000006,
                Self::EOS => 0.002,
                Self::BTTC => 2000.,
                Self::POL => 0.01,
                Self::DOT => 0.0005,
                Self::ZEC => 0.00004,
                Self::RVN => 0.01,
                Self::LINK => 0.0001,
                Self::DAI => 0.002,
                Self::TUSD => 0.002,
                Self::AVAX => 0.0001,
                Self::NEAR => 0.0008,
                Self::ZEN => 0.0002,
                Self::AAVE => 0.000006,
                Self::NOT => 0.8,
                Self::ENA => 0.006,
                Self::UNI => 0.0003,
                Self::TON => 0.0006,
                Self::TRUMP => 0.0002,
                Self::FDUSD => 0.002,
                Self::WBTC => 0.00000004,
                Self::CAD => 0.01,
            },
            _ => 1e-8,
        }
    }
}

impl ToString for Currency {
    fn to_string(&self) -> String {
        match self {
            Self::XRP => "XRP".to_string(),
            Self::DECOY => "DECOY".to_string(),
            Self::USDT => "USDT".to_string(),
            Self::BTC => "BTC".to_string(),
            Self::LTC => "LTC".to_string(),
            Self::TRX => "TRX".to_string(),
            Self::DOGE => "DOGE".to_string(),
            Self::ETH => "ETH".to_string(),
            Self::XLM => "XLM".to_string(),
            Self::BCH => "BCH".to_string(),
            Self::BNB => "BNB".to_string(),
            Self::SHIB => "SHIB".to_string(),
            Self::USDC => "USDC".to_string(),
            Self::ADA => "ADA".to_string(),
            Self::DASH => "DASH".to_string(),
            Self::SOL => "SOL".to_string(),
            Self::ATOM => "ATOM".to_string(),
            Self::ETC => "ETC".to_string(),
            Self::XMR => "XMR".to_string(),
            Self::EOS => "EOS".to_string(),
            Self::BTTC => "BTTC".to_string(),
            Self::POL => "POL".to_string(),
            Self::DOT => "DOT".to_string(),
            Self::ZEC => "ZEC".to_string(),
            Self::RVN => "RVN".to_string(),
            Self::LINK => "LINK".to_string(),
            Self::DAI => "DAI".to_string(),
            Self::TUSD => "TUSD".to_string(),
            Self::AVAX => "AVAX".to_string(),
            Self::NEAR => "NEAR".to_string(),
            Self::ZEN => "ZEN".to_string(),
            Self::AAVE => "AAVE".to_string(),
            Self::NOT => "NOT".to_string(),
            Self::ENA => "ENA".to_string(),
            Self::UNI => "UNI".to_string(),
            Self::TON => "TON".to_string(),
            Self::TRUMP => "TRUMP".to_string(),
            Self::FDUSD => "FDUSD".to_string(),
            Self::WBTC => "WBTC".to_string(),
            Self::CAD => "CAD".to_string(),
        }
    }
}
